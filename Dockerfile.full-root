# syntax=docker/dockerfile:1.4
#
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG SSH_SERVER_VERSION=amd64-9.7_p1-r4-ls174

FROM --platform=linux/amd64 lscr.io/linuxserver/openssh-server:${SSH_SERVER_VERSION}
# base image: https://github.com/linuxserver/docker-openssh-server

ARG SSH_SERVER_VERSION=amd64-9.7_p1-r4-ls174

ARG WEB_PORT="8022"
ARG SSH_USER="root"
ARG SSH_PASS="pass"
ARG PASSWORD_ACCESS="true"
ARG SUDO_ACCESS="true"

ARG CLOUDSDK_VERSION
ARG CSQL_PROXY_VERSION
ARG ALLOYDB_PROXY_VERSION
ARG USQL_VERSION

ARG GCSFUSE_VERSION=2.7.0
ARG GOST_VERSION=3.0.0

ENV USER_NAME=${SSH_USER}
ENV USER_PASSWORD=${SSH_PASS}
ENV HTTP_PORT=${WEB_PORT}

ENV PASSWORD_ACCESS=${PASSWORD_ACCESS}
ENV SUDO_ACCESS=${SUDO_ACCESS}
ENV LOG_STDOUT=true

ENV PUID=0
ENV PGID=0

USER 0:0

COPY ./init_wssh ./keys/authorized_keys* /
COPY ./keys/*.pub /pubkeys/
COPY ./ssh_proxy_client.yaml /ssh_proxy_client.yaml
COPY ./poll_ssh_proxy_server /poll_ssh_proxy_server
COPY ./cloud_run_ssh_banner /cloud_run_ssh_banner

RUN apk update && apk add --quiet --no-progress \
    dpkg fuse vim busybox-extras net-tools bind-tools iproute2 \
    openssl curl tmux git bc traceroute tcptraceroute tcpdump mtr nmap redis \
    python3-dev py3-pip gcc libc-dev libffi-dev

RUN wget -nv -q -P /usr/bin 'http://www.vdberg.org/~richard/tcpping' && chmod a+rx /usr/bin/tcpping
RUN python -m pip config --user set global.progress_bar off \
    && python -m pip install --break-system-packages --no-cache-dir httpie webssh
RUN curl -o /gcsfuse.deb -L \
    https://github.com/GoogleCloudPlatform/gcsfuse/releases/download/v${GCSFUSE_VERSION}/gcsfuse_${GCSFUSE_VERSION}_amd64.deb \
    && dpkg -i --force-all /gcsfuse.deb && rm -vf /gcsfuse.deb
RUN curl -sL -o yq https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64 && chmod +x /yq
RUN curl -sL -o gost.tar.gz \
    https://github.com/go-gost/gost/releases/download/v${GOST_VERSION}/gost_${GOST_VERSION}_linux_amd64.tar.gz \
    && tar -xzf gost.tar.gz && chmod +x gost && rm -vf gost.tar.gz

RUN wget -nv -q -P / \
    https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-${CLOUDSDK_VERSION}-linux-x86_64.tar.gz \
    && tar -xzf /google-cloud-cli-${CLOUDSDK_VERSION}-linux-x86_64.tar.gz -C / \
    && rm -vf /google-cloud-cli-${CLOUDSDK_VERSION}-linux-x86_64.tar.gz \
    && /google-cloud-sdk/bin/gcloud components install cbt alpha beta --quiet \
    && /google-cloud-sdk/bin/gcloud components update --quiet \
    && ln -s /google-cloud-sdk/bin/* /usr/bin/ \
    && echo "export PATH=$PATH:/google-cloud-sdk/bin" >> ~/.bashrc \
    && PATH="$PATH:/google-cloud-sdk/bin"

RUN curl -sL -o /cloud-sql-proxy \
    https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v${CSQL_PROXY_VERSION}/cloud-sql-proxy.linux.amd64 \
    && chmod a+x /cloud-sql-proxy && ln -s /cloud-sql-proxy /usr/bin/cloud-sql-proxy

RUN wget -nv -q \
    https://storage.googleapis.com/alloydb-auth-proxy/v${ALLOYDB_PROXY_VERSION}/alloydb-auth-proxy.linux.amd64 -O /alloydb-auth-proxy \
    && chmod a+x /alloydb-auth-proxy && ln -s /alloydb-auth-proxy /usr/bin/alloydb-auth-proxy

RUN wget -nv -q -P / \
    https://github.com/xo/usql/releases/download/v${USQL_VERSION}/usql_static-${USQL_VERSION}-linux-amd64.tar.bz2 \
    && tar -xf /usql_static-${USQL_VERSION}-linux-amd64.tar.bz2 \
    && rm -vf /usql_static-${USQL_VERSION}-linux-amd64.tar.bz2 \
    && ln -s /usql_static /usr/bin/usql

# see: https://github.com/linuxserver/docker-openssh-server?tab=readme-ov-file#application-setup
RUN if [[ -f /authorized_keys ]] ; then mkdir -p /config/.ssh/ \
    && cat /authorized_keys >> /config/.ssh/authorized_keys \
    && mkdir -p /wssh/secrets/1 \
    && mkdir -p /wssh/secrets/2 \
    && mkdir -p /wssh/secrets/3 \
    && cat /authorized_keys > /wssh/secrets/1/authorized_keys \
    ; fi

RUN if [[ "${USER_NAME}" == "root" ]] ; then \
    echo "root:${USER_PASSWORD}" | chpasswd \
    && sed --in-place '/PermitRootLogin/d' /etc/ssh/sshd_config \
    && sed --in-place '/AuthorizedKeysFile/d' /etc/ssh/sshd_config \
    && sed --in-place '/AllowTcpForwarding/d' /etc/ssh/sshd_config \
    && sed --in-place '/Banner/d' /etc/ssh/sshd_config \
    && echo -e '\nPermitRootLogin yes' >> /etc/ssh/sshd_config \
    && echo -e '\nAuthorizedKeysFile /wssh/secrets/1/authorized_keys' >> /etc/ssh/sshd_config \
    && echo -e '\nAllowTcpForwarding yes' >> /etc/ssh/sshd_config \
    && echo -e '\nBanner /cloud_run_ssh_banner' >> /etc/ssh/sshd_config \
    ; fi

RUN echo -n "${HTTP_PORT}" > /http.port

EXPOSE ${HTTP_PORT}/tcp

CMD ["exec", "env", "/init_wssh"]
