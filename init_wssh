#!/usr/bin/with-contenv bash

export DEFAULT_HTTP_PORT=$(cat /http.port | tr -d '\n')
export HTTP_PORT=${PORT:-$DEFAULT_HTTP_PORT}

MDS_URL='http://metadata.google.internal/computeMetadata/v1'
MDS_CURL="curl -s -H Metadata-Flavor:Google ${MDS_URL}"

export PROJECT_ID=$(${MDS_CURL}/project/project-id)
export PROJECT_NUM=$(${MDS_CURL}/project/numeric-project-id)
_GCP_REGION=$(${MDS_CURL}/instance/region)
export GCP_REGION=${_GCP_REGION##*/}
export INSTANCE_ID=$(${MDS_CURL}/instance/id)

export INSTANCE_UUID="$(cat /proc/sys/kernel/random/uuid | tr -d '\n')"

SSH_PROXY_SERVER_ENABLED=${ENABLE_SSH_PROXY:-false}
if [[ "${SSH_PROXY_SERVER_ENABLED}" == "true" ]]; then
  echo "export MDS_URL=${MDS_URL}" > /ssh_proxy_client.env

  SSH_PROXY_SERVER_ID="${SSH_PROXY_SERVER_ID:-'00000000-0000-0000-0000-000000000000'}"
  echo "export SSH_PROXY_SERVER_ID=${SSH_PROXY_SERVER_ID}" >> /ssh_proxy_client.env

  echo "export SSH_PROXY_SERVER_HOST=${SSH_PROXY_SERVER_HOST}" >> /ssh_proxy_client.env
  echo "export SSH_PROXY_SERVER_API_PORT=${SSH_PROXY_SERVER_API_PORT:-5000}" >> /ssh_proxy_client.env
  echo "export SSH_PROXY_SERVER_TUNNEL_PORT=${SSH_PROXY_SERVER_TUNNEL_PORT:-5555}" >> /ssh_proxy_client.env

  echo "export SSH_PROXY_CLIENT_ID=${INSTANCE_UUID}" >> /ssh_proxy_client.env

  SSH_PROXY_SERVER_URL="https://${SSH_PROXY_SERVER_HOST}:${SSH_PROXY_SERVER_API_PORT}"
  echo "export SSH_PROXY_SERVER_URL=${SSH_PROXY_SERVER_URL}" >> /ssh_proxy_client.env
 
  SSH_PROXY_SERVER_INSTANCE_PATH="project/${PROJECT_ID}/region/${GCP_REGION}/service/${K_SERVICE}/revision/${K_REVISION}/instance/${INSTANCE_ID}"
  echo "export SSH_PROXY_SERVER_INSTANCE_PATH=${SSH_PROXY_SERVER_INSTANCE_PATH}" >> /ssh_proxy_client.env

  SSH_PROXY_SERVER_INSTANCE_URL="${SSH_PROXY_SERVER_URL}/${SSH_PROXY_SERVER_INSTANCE_PATH}"
  echo "export SSH_PROXY_SERVER_INSTANCE_URL=${SSH_PROXY_SERVER_INSTANCE_URL}" >> /ssh_proxy_client.env

  # register INGRESS with the SSH Proxy Server
  # renew INGRESS every x amount of seconds
  /poll_ssh_proxy_server ${SSH_PROXY_PING_INTERVAL:-60} POST &
  export SSH_PROXY_SERVER_POLL_PID=$!

  sed -e "s|%SSH_PROXY_SERVER_ID%|${SSH_PROXY_SERVER_ID}|g" \
    -e "s|%SSH_PROXY_CLIENT_ID%|${INSTANCE_UUID}|g" \
    -e "s|%SSH_PROXY_SERVER_HOST%|${SSH_PROXY_SERVER_HOST}|g" \
    -e "s|%SSH_PROXY_SERVER_PORT%|${SSH_PROXY_SERVER_TUNNEL_PORT}|g" \
    -e "s|%INSTANCE_ID%|${INSTANCE_ID}|g" \
    /ssh_proxy_client.yaml > /tmp/ssh_proxy_client.yaml

  # start tunnel with SSH Proxy Server
  /gost -D -C /tmp/ssh_proxy_client.yaml 2>&1 &
  export SSH_PROXY_CLIENT_PID=$!
fi

SSH_SERVER_STATIC_PARAMS="hostname=localhost&port=2222&term=xterm-256color"

export SSH_SERVER_URL="https://${K_SERVICE}-${PROJECT_NUM}.${GCP_REGION}.run.app"
SSH_SERVER_TITLE="${PROJECT_ID}_${GCP_REGION}_${K_SERVICE}_${K_REVISION}"
SSH_SERVER_PARAMS="${SSH_SERVER_STATIC_PARAMS}&username=${USER_NAME}&title=${SSH_SERVER_TITLE}"

echo "credentials: ${USER_NAME}/${USER_PASSWORD}"

echo "SSH Server URL: ${SSH_SERVER_URL}?${SSH_SERVER_PARAMS}"
echo "SSH Server proxy command: gcloud run services proxy ${K_SERVICE} --region=${GCP_REGION} --port=${HTTP_PORT}"
echo "SSH Server proxied URL: http://localhost:${HTTP_PORT}?${SSH_SERVER_PARAMS}"
echo "SSH Server project/region/service/revision/instnace/tunnel: ${PROJECT_ID} ${GCP_REGION} ${K_SERVICE} ${K_REVISION} ${INSTANCE_ID} ${INSTANCE_UUID}"

trap 'kill -TERM $SSH_WEB_SERVER_PID' TERM INT
# web ssh terminal: https://github.com/huashengdun/webssh
wssh --address='0.0.0.0' --port=${HTTP_PORT} \
  --encoding='utf-8' --xheaders=True --debug=True \
  --origin='*' --policy=autoadd --log_to_stderr \
  --logging=debug --redirect=False --fbidhttp=False \
  --wpintvl=5 --maxconn=10 --xsrf=False &
export SSH_WEB_SERVER_PID=$!
echo "[INFO] – SSH web server started w/PID: ${SSH_WEB_SERVER_PID}"
wait ${SSH_WEB_SERVER_PID}
trap - TERM INT
wait ${SSH_WEB_SERVER_PID}
echo "[INFO] – SSH web server ( PID: ${SSH_WEB_SERVER_PID} ) exited"

kill -15 ${SSH_PROXY_SERVER_POLL_PID}
kill -15 ${SSH_PROXY_CLIENT_PID}

if [[ "${SSH_PROXY_SERVER_ENABLED}" == "true" ]]; then
  /poll_ssh_proxy_server 0 DELETE
fi
