#! /bin/bash

SSH_HOST='127.0.0.1'
SSH_PORT='2222'

SSH_PROXY_VISITOR_ID=`cat /proc/sys/kernel/random/uuid | tr -d '\n'`

JQ_CMD='/yq -M -pj -oj -I0'

DEFAULT_SSH_PROXY_SERVER_API_PORT=5000
DEFAULT_SSH_PROXY_SERVER_TUNNEL_PORT=5555

export EXPECTED_SSH_PROXY_SERVER_NAME="${SSH_PROXY_SERVER_ID}.ssh-proxy.internal"

# make sure that INGRESS is created agains the correct SSH Proxy Server: get the subject from the SSH Proxy Server self-signed certificate.
export SSH_PROXY_SERVER_API_HOST_AND_PPORT="${SSH_PROXY_SERVER_HOST}:${SSH_PROXY_SERVER_API_PORT:-$DEFAULT_SSH_PROXY_SERVER_API_PORT}"
export SSH_PROXY_SERVER_NAME=`openssl s_client \
  -connect "${SSH_PROXY_SERVER_API_HOST_AND_PPORT}" 2>&1 </dev/null \
  | grep 'subject=' | tr -d ' ' | tr ',' '\n' | grep -Ei '^CN=.*' | awk -F'=' '{print $2}' | tr -d '\n'`

if [[ "${SSH_PROXY_SERVER_NAME}" != "${EXPECTED_SSH_PROXY_SERVER_NAME}" ]]; then
  echo "SSH Proxy Server identity could not be verified: ${EXPECTED_SSH_PROXY_SERVER_NAME} - ${SSH_PROXY_SERVER_NAME}"
  exit 1
fi

sed -e "s|%SSH_PROXY_SERVER_HOST%|${SSH_PROXY_SERVER_HOST}|g" \
  -e "s|%SSH_PROXY_SERVER_API_PORT%|${SSH_PROXY_SERVER_API_PORT:-$DEFAULT_SSH_PROXY_SERVER_API_PORT}|g" \
  -e "s|%SSH_PROXY_SERVER_ID%|${SSH_PROXY_SERVER_ID}|g" \
  -e "s|%SSH_PROXY_VISITOR_ID%|${SSH_PROXY_VISITOR_ID}|g" \
  -e "s|%PROJECT_ID%|${PROJECT_ID}|g" \
  -e "s|%INSTANCE_ID%|${INSTANCE_ID}|g" \
  /ssh_proxy_visitor_http.yaml > /tmp/ssh_proxy_visitor_http.yaml

/gost -C /tmp/ssh_proxy_visitor_http.yaml &>/dev/null &

sleep 2

HTTPS_MDS_URL="https://127.0.0.1:8254"
MDS_ID_TOKEN_CURL="curl -sk ${HTTPS_MDS_URL}/id-token?audience=${SSH_PROXY_SERVER_NAME}&format=full"

ID_TOKEN="$(${MDS_ID_TOKEN_CURL} | tr -d '\n')"

export SSH_PROXY_SERVER_API_HOST="${SSH_PROXY_SERVER_NAME}:${SSH_PROXY_SERVER_API_PORT:-$DEFAULT_SSH_PROXY_SERVER_API_PORT}"
export SSH_PROXY_SERVER_API_LOCALHOST="127.0.0.1:${SSH_PROXY_SERVER_API_PORT:-$DEFAULT_SSH_PROXY_SERVER_API_PORT}"

export SSH_PROXY_SERVER_API_URL="https://${SSH_PROXY_SERVER_API_LOCALHOST}/instance/${INSTANCE_ID}"

SERVERLESS_INSTANCE=`curl -sk \
  -H "Host: ${SSH_PROXY_SERVER_API_HOST}" \
  -H "x-s8s-ssh-authorization: ${ID_TOKEN}" \
  -H "x-s8s-ssh-server-id: ${SSH_PROXY_SERVER_ID}" \
  -H "x-s8s-ssh-visitor-id: ${SSH_PROXY_VISITOR_ID}" \
  "${SSH_PROXY_SERVER_API_URL}" \
  | ${JQ_CMD} 'del(.instance,.ping)' \
  | tr -d '\n'`

echo "${SERVERLESS_INSTANCE}" | /yq -pj -os -rM 'del(.tunnel)'

SSH_PROXY_CLIENT_ID=`echo "${SERVERLESS_INSTANCE}" | /yq -pj -oa -rM '.tunnel' | tr -d '\n'`
echo "Discovered tunnel '${SSH_PROXY_CLIENT_ID}' for instance '${INSTANCE_ID}'":

sed -e "s|%SSH_PROXY_SERVER_HOST%|${SSH_PROXY_SERVER_HOST}|g" \
  -e "s|%SSH_PROXY_SERVER_TUNNEL_PORT%|${SSH_PROXY_SERVER_TUNNEL_PORT:-$DEFAULT_SSH_PROXY_SERVER_TUNNEL_PORT}|g" \
  -e "s|%SSH_PROXY_SERVER_ID%|${SSH_PROXY_SERVER_ID}|g" \
  -e "s|%SSH_PROXY_CLIENT_ID%|${SSH_PROXY_CLIENT_ID}|g" \
  -e "s|%SSH_PROXY_VISITOR_ID%|${SSH_PROXY_VISITOR_ID}|g" \
  -e "s|%PROJECT_ID%|${PROJECT_ID}|g" \
  -e "s|%INSTANCE_ID%|${INSTANCE_ID}|g" \
  /ssh_proxy_visitor.yaml > /tmp/ssh_proxy_visitor.yaml

/gost -C /tmp/ssh_proxy_visitor.yaml &>/dev/null &

while : ; do
  proxy_available=`netstat -tulpan 2>/dev/null | grep -i listen | grep ':2222' | grep tcp6 | sort | uniq | wc -l | tr -d '\n'`
  [[ "${proxy_available}" == '1' ]] && break
  echo "waiting for proxy..."
  sleep 1
done

sleep 1

if [[ -s "/ssh.key" ]]; then
  ssh -4 -C -p ${SSH_PORT} "${@:2}" -i /ssh.key root@${SSH_HOST}
else
  ssh -4 -C -p ${SSH_PORT} "${@:2}" root@${SSH_HOST}
fi
